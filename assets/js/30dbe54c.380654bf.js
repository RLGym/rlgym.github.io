"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[784],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),u=i,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||a;return t?o.createElement(f,r(r({ref:n},c),{},{components:t})):o.createElement(f,r({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<a;d++)r[d]=t[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=t(7462),i=(t(7294),t(4137));const a={title:"Done Conditions",sidebar_position:5},r="Done Conditions",s={unversionedId:"Rocket League/Configuration Objects/done_conditions",id:"Rocket League/Configuration Objects/done_conditions",title:"Done Conditions",description:"A DoneCondition determines when an episode should end. In RLGym v2, a done condition can signal either a terminal state (natural episode end) or a truncated state (early termination). The RocketSim transition engine handles checking these conditions and setting the appropriate flags in the environment step.",source:"@site/docs/Rocket League/Configuration Objects/done_conditions.md",sourceDirName:"Rocket League/Configuration Objects",slug:"/Rocket League/Configuration Objects/done_conditions",permalink:"/Rocket League/Configuration Objects/done_conditions",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Done Conditions",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Action Parsers",permalink:"/Rocket League/Configuration Objects/action_parsers"},next:{title:"Observation Builders",permalink:"/Rocket League/Configuration Objects/observation_builders"}},l={},d=[{value:"Implementation",id:"implementation",level:2},{value:"Examples",id:"examples",level:2},{value:"Combining Conditions",id:"combining-conditions",level:2}],c={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"done-conditions"},"Done Conditions"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"DoneCondition")," determines when an episode should end. In RLGym v2, a done condition can signal either a terminal state (natural episode end) or a truncated state (early termination). The RocketSim transition engine handles checking these conditions and setting the appropriate flags in the environment step."),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,"To implement a done condition, a user must define two methods: ",(0,i.kt)("inlineCode",{parentName:"p"},"reset")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"is_done"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"reset")," method is called when the environment is reset, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"is_done")," method determines if the current state should end the episode."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Called once when the environment is reset.\ndef reset(self, agents: List[AgentID], initial_state: GameState, shared_info: Dict[str, Any]) -> None:\n\n# Called once per step, returns a dictionary indicating if each agent's episode should end.\ndef is_done(self, agents: List[AgentID], state: GameState, shared_info: Dict[str, Any]) -> Dict[AgentID, bool]:\n")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"Here's a simple done condition that ends the episode when an agent scores a goal. This is a natural end to the episode, so we use it as a terminal condition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from typing import List, Dict, Any\nfrom rlgym.api import DoneCondition, AgentID\nfrom rlgym.rocket_league.api import GameState\n\nclass GoalCondition(DoneCondition[AgentID, GameState]):\n    """\n    A DoneCondition that is satisfied when a goal is scored.\n    """\n    def reset(self, agents: List[AgentID], initial_state: GameState, shared_info: Dict[str, Any]) -> None:\n        pass\n\n    def is_done(self, agents: List[AgentID], state: GameState, shared_info: Dict[str, Any]) -> Dict[AgentID, bool]:\n        return {agent: state.goal_scored for agent in agents}\n')),(0,i.kt)("p",null,"Sometimes we want to end episodes early to keep training efficient. For example, if the ball hasn't been touched in a while, we might want to start fresh from a kickoff. Here's a done condition that does that (we use this as a truncation condition):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from typing import List, Dict, Any\nfrom rlgym.api import DoneCondition, AgentID\nfrom rlgym.rocket_league.api import GameState\nfrom rlgym.rocket_league.common_values import TICKS_PER_SECOND\n\nclass NoTouchTimeoutCondition(DoneCondition[AgentID, GameState]):\n    """\n    A DoneCondition that is satisfied when no car has touched the ball for a specified amount of time.\n    """\n    def __init__(self, timeout_seconds: float):\n        """\n        Args:\n            timeout_seconds: Timeout in seconds\n        """\n        self.timeout_seconds = timeout_seconds\n        self.last_touch_tick = None\n\n    def reset(self, agents: List[AgentID], initial_state: GameState, shared_info: Dict[str, Any]) -> None:\n        self.last_touch_tick = initial_state.tick_count\n\n    def is_done(self, agents: List[AgentID], state: GameState, shared_info: Dict[str, Any]) -> Dict[AgentID, bool]:\n        if any(car.ball_touches > 0 for car in state.cars.values()):\n            self.last_touch_tick = state.tick_count\n            done = False\n        else:\n            time_elapsed = (state.tick_count - self.last_touch_tick) / TICKS_PER_SECOND\n            done = time_elapsed >= self.timeout_seconds\n\n        return {agent: done for agent in agents}\n')),(0,i.kt)("h2",{id:"combining-conditions"},"Combining Conditions"),(0,i.kt)("p",null,"If you want to combine more than one done condition into a single object, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"AnyCondition")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"AllCondition")," classes. As their names imply, they will return ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if any or all of the provided conditions are satisfied, respectively. While in practice we wouldn't want to combine our example conditions into one, this code snippet shows how to do it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from rlgym.rocket_league.done_conditions import AnyCondition, AllCondition, GoalCondition, NoTouchTimeoutCondition\n\n# This will end the episode as soon as a goal is scored OR the ball hasn't been touched for 30 seconds.\nany_condition = AnyCondition([\n    GoalCondition(),\n    NoTouchTimeoutCondition(timeout_seconds=30)\n])\n\n# This will end the episode when a goal is scored AND the ball hasn't been touched for 30 seconds.\nall_condition = AllCondition([\n    GoalCondition(),\n    NoTouchTimeoutCondition(timeout_seconds=30)\n])\n")))}m.isMDXComponent=!0}}]);