"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[823],{4137:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>y});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(r),d=n,y=p["".concat(s,".").concat(d)]||p[d]||u[d]||a;return r?o.createElement(y,i(i({ref:t},m),{},{components:r})):o.createElement(y,i({ref:t},m))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4985:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=r(7462),n=(r(7294),r(4137));const a={title:"RLGym Tools"},i="RLGym Tools",l={unversionedId:"RLGym Tools/introduction",id:"RLGym Tools/introduction",title:"RLGym Tools",description:"RLGym Tools is a collection auxiliary tools for RLGym that are useful for training and evaluating RL agents in Rocket League. These tools include a replay parser, an in-game scoreboard tracker, several reward functions and action parsers, much more. An exhaustive list of the tools won't be provided here, but we will highlight a few of them so you can get an idea of what is available.",source:"@site/docs/RLGym Tools/introduction.md",sourceDirName:"RLGym Tools",slug:"/RLGym Tools/introduction",permalink:"/RLGym Tools/introduction",draft:!1,tags:[],version:"current",frontMatter:{title:"RLGym Tools"}},s={},c=[{value:"Replay Parser",id:"replay-parser",level:2},{value:"Scoreboard",id:"scoreboard",level:2}],m={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,o.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"rlgym-tools"},"RLGym Tools"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/rlgym/rlgym-tools"},"RLGym Tools")," is a collection auxiliary tools for RLGym that are useful for training and evaluating RL agents in Rocket League. These tools include a replay parser, an in-game scoreboard tracker, several reward functions and action parsers, much more. An exhaustive list of the tools won't be provided here, but we will highlight a few of them so you can get an idea of what is available. "),(0,n.kt)("h2",{id:"replay-parser"},"Replay Parser"),(0,n.kt)("p",null,"The replay parser converts Rocket League replay files into sequences of RLGym ",(0,n.kt)("inlineCode",{parentName:"p"},"GameState")," objects for replay analysis and imitation learning. "),(0,n.kt)("p",null,"Here is a simple example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from rlgym_tools.rocket_league.replays.parsed_replay import ParsedReplay\nfrom rlgym_tools.rocket_league.replays.convert import replay_to_rlgym\n\n# Parse replay file\nreplay = ParsedReplay.load("my_replay.replay")\n\n# Convert to ReplayFrame sequence\nreplay_frames = replay_to_rlgym(replay)\n\n# Now we can iterate over the replay frames.\nfor replay_frame in replay_frames:\n    # ReplayFrame structure:\n    #     state: GameState                 # Game state representation\n    #     actions: Dict[int, np.ndarray]   # Player action vectors\n    #     update_age: Dict[int, float]     # Time delta since last update\n    #     scoreboard: ScoreboardInfo       # Game score state\n    #     episode_seconds_remaining: float  # Match time remaining\n    #     next_scoring_team: Optional[int] # Team scoring next goal\n    #     winning_team: Optional[int]      # Currently leading team\n')),(0,n.kt)("h2",{id:"scoreboard"},"Scoreboard"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"ScoreboardProvider")," facilitates training in complete Rocket League matches by tracking the in-game scoreboard through the ",(0,n.kt)("inlineCode",{parentName:"p"},"shared_info")," interface. The scoreboard can be integrated with the ",(0,n.kt)("inlineCode",{parentName:"p"},"GameMutator")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"GameCondition")," objects from RLGym Tools to enforce standard Rocket League match termination rules."),(0,n.kt)("p",null,"Implementation example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from rlgym.api import RLGym\nfrom rlgym_tools.rocket_league.state_mutators.game_mutator import GameMutator\nfrom rlgym_tools.rocket_league.shared_info_providers.scoreboard_provider import ScoreboardProvider\nfrom rlgym_tools.rocket_league.done_conditions.game_condition import GameCondition\n\n# Configure an environment to behave like a standard Rocket League match\nenv = RLGym(\n    state_mutator=GameMutator(),\n    shared_info_provider=ScoreboardProvider(),\n    termination_cond=GameCondition(),\n    ...\n)\n")),(0,n.kt)("p",null,"The scoreboard is accessible via ",(0,n.kt)("inlineCode",{parentName:"p"},'shared_info["scoreboard"]')," within anything that has access to ",(0,n.kt)("inlineCode",{parentName:"p"},"shared_info")," (e.g. any of the RLGym configuration objects). Episodes in this environment will terminate according to standard Rocket League rules, including going into overtime after 5 minutes until a team scores if the score is tied."),(0,n.kt)("p",null,"To see all of the tools and components available in RLGym Tools, visit the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/rlgym/rlgym-tools"},"RLGym Tools repository"),"."))}u.isMDXComponent=!0}}]);