"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[467],{4137:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var u=a.createContext({}),c=function(t){var e=a.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(u.Provider,{value:e},t.children)},l="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,u=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),l=c(n),f=r,d=l["".concat(u,".").concat(f)]||l[f]||m[f]||o;return n?a.createElement(d,i(i({ref:e},p),{},{components:n})):a.createElement(d,i({ref:e},p))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=t,s[l]="string"==typeof t?t:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6186:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(4137));const o={title:"State Mutators"},i="State Mutators",s={unversionedId:"Rocket League/Configuration Objects/state_mutators",id:"Rocket League/Configuration Objects/state_mutators",title:"State Mutators",description:"Before anything happens in the environment, there must be an initial state. RLGym v2 provides a way for users to construct and modify this state via StateMutator objects. Multiple StateMutator objects can be combined using MutatorSequence, which applies them sequentially to modify the current state.",source:"@site/docs/Rocket League/Configuration Objects/state_mutators.md",sourceDirName:"Rocket League/Configuration Objects",slug:"/Rocket League/Configuration Objects/state_mutators",permalink:"/Rocket League/Configuration Objects/state_mutators",draft:!1,tags:[],version:"current",frontMatter:{title:"State Mutators"},sidebar:"tutorialSidebar",previous:{title:"Reward Functions",permalink:"/Rocket League/Configuration Objects/reward_functions"},next:{title:"Creating an Environment",permalink:"/Custom Environments/custom-environment"}},u={},c=[{value:"Creating a Custom State Mutator",id:"creating-a-custom-state-mutator",level:2},{value:"Using State Mutators",id:"using-state-mutators",level:2}],p={toc:c},l="wrapper";function m(t){let{components:e,...n}=t;return(0,r.kt)(l,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"state-mutators"},"State Mutators"),(0,r.kt)("p",null,"Before anything happens in the environment, there must be an initial state. RLGym v2 provides a way for users to construct and modify this state via ",(0,r.kt)("inlineCode",{parentName:"p"},"StateMutator")," objects. Multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"StateMutator")," objects can be combined using ",(0,r.kt)("inlineCode",{parentName:"p"},"MutatorSequence"),", which applies them sequentially to modify the current state."),(0,r.kt)("p",null,"The sequence of ",(0,r.kt)("inlineCode",{parentName:"p"},"StateMutator")," objects is invoked each time ",(0,r.kt)("inlineCode",{parentName:"p"},"TransitionEngine.create_base_state()")," is called. The state returned by the final ",(0,r.kt)("inlineCode",{parentName:"p"},"StateMutator")," in the sequence becomes the current state of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TransitionEngine"),"."),(0,r.kt)("h2",{id:"creating-a-custom-state-mutator"},"Creating a Custom State Mutator"),(0,r.kt)("p",null,"To implement a custom state mutator, inherit from the ",(0,r.kt)("inlineCode",{parentName:"p"},"StateMutator")," class and implement its ",(0,r.kt)("inlineCode",{parentName:"p"},"apply")," method. The following example demonstrates a mutator that sets specific positions for cars and the ball:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from typing import Dict, Any\nimport numpy as np\nfrom rlgym.api import StateMutator\nfrom rlgym.rocket_league.api import GameState\nfrom rlgym.rocket_league import common_values\n\nclass CustomStateMutator(StateMutator[GameState]):\n    """A StateMutator that sets custom positions for cars and the ball."""\n    \n    def apply(self, state: GameState, shared_info: Dict[str, Any]) -> None:\n        # Define spawn location and orientation\n        desired_car_pos = np.array([100, 100, 17], dtype=np.float32)  # x, y, z\n        desired_yaw = np.pi/2\n\n        # Iterate over all cars in the game\n        for car in state.cars.values():\n            if car.is_orange:\n                # Orange team positions\n                pos = desired_car_pos\n                yaw = desired_yaw\n            else:\n                # Blue team positions (inverted)\n                pos = -desired_car_pos\n                yaw = -desired_yaw\n\n            # Set car physics state\n            car.physics.position = pos\n            car.physics.euler_angles = np.array([0, 0, yaw], dtype=np.float32)\n            car.boost = 33\n\n        # Set ball physics state\n        state.ball.position = np.array([0, 0, common_values.CEILING_Z/2], dtype=np.float32)\n        state.ball.linear_velocity = np.zeros(3, dtype=np.float32)\n        state.ball.angular_velocity = np.zeros(3, dtype=np.float32)\n')),(0,r.kt)("h2",{id:"using-state-mutators"},"Using State Mutators"),(0,r.kt)("p",null,"To use state mutators in your environment, you can pass them directly to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RLGym")," constructor. You can also combine multiple mutators using ",(0,r.kt)("inlineCode",{parentName:"p"},"MutatorSequence"),". Here's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from rlgym.api import RLGym\nfrom rlgym.rocket_league.state_mutators import MutatorSequence, FixedTeamSizeMutator, KickoffMutator\n\n# Create environment with a sequence of mutators\nenv = RLGym(\n    state_mutator=MutatorSequence(\n        FixedTeamSizeMutator(blue_size=2, orange_size=2),  # Set up 2v2 game\n        KickoffMutator(),  # Set up kickoff positions\n        CustomStateMutator()  # Apply our custom state changes\n    ),\n    # ... other configuration objects ...\n)\n")))}m.isMDXComponent=!0}}]);