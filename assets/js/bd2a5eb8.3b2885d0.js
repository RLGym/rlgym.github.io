"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[590],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(4137));const o={title:"Introduction",sidebar_position:1},i="Introduction",l={unversionedId:"Getting Started/introduction",id:"Getting Started/introduction",title:"Introduction",description:"What is RLGym?",source:"@site/docs/Getting Started/introduction.md",sourceDirName:"Getting Started",slug:"/Getting Started/introduction",permalink:"/Getting Started/introduction",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Overview",permalink:"/Getting Started/overview"}},s={},c=[{value:"What is RLGym?",id:"what-is-rlgym",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("h2",{id:"what-is-rlgym"},"What is RLGym?"),(0,a.kt)("p",null,"RLGym is a Python API for creating reinforcement learning environments. While it was originally designed for the game ",(0,a.kt)("a",{parentName:"p",href:"https://www.rocketleague.com"},"Rocket League"),", the core API is now game-agnostic. This means you can use the RLGym API to create a broad range of environments, from simple grid worlds to complex physics simulations. Check out the ",(0,a.kt)("a",{parentName:"p",href:"/Getting%20Started/overview"},"overview")," section for a detailed overview of the new API."),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"RLGym provides an implementation for Rocket League that uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ZealanL/rocketsim"},"RocketSim")," as a headless simulator. You can use the default settings or customize the environment by implementing your own ",(0,a.kt)("a",{parentName:"p",href:"/Getting%20Started/overview/"},"configuration objects"),". Take a look at the ",(0,a.kt)("a",{parentName:"p",href:"/Getting%20Started/quickstart"},"Quickstart Guide")," to train your first Rocket League agent, or check out the ",(0,a.kt)("a",{parentName:"p",href:"../../Custom%20Environments/custom-environment"},"Custom Environments")," section to see an example of how to create your own environment."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"RLGym is split into sub-packages to keep things simple. The core API has no dependencies, and you can add extra features through these sub-packages:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Installs only the api\npip install rlgym  \n\n# Installs all rocket league packages\npip install rlgym[rl]  \n\n# Installs only RocketSim rocket league packages\npip install rlgym[rl-sim]  \n\n# Installs RLViser and RocketSim rocket league packages\npip install rlgym[rl-rlviser]  \n\n# Installs every rlgym component\npip install rlgym[all] \n")))}m.isMDXComponent=!0}}]);